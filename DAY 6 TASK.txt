1:Class - Movie

class Movie {
constructor(title, studio, rating="PG") {
this.title = title;
this.studio = studio;
this.rating = rating;
}
static getPG(movies) {
return movies.filter(movie => movie.rating === "PG");
}
}
const casinoRoyale = new Movie("Casino Royale", "Eon Productions", "PG-13");
console.log(casinoRoyale);
const movies = [
new Movie("Movie 1", "Studio 1", "PG"),
new Movie("Movie 2", "Studio 2", "PG-13"),
new Movie("Movie 3", "Studio 3", "PG"),
new Movie("Movie 4", "Studio 4", "R"),
new Movie("Movie 5", "Studio 5", "PG"),
];
const pgMovies = Movie.getPG(movies);
console.log(pgMovies);



2:Circle - Class
Converted the UML diagram to Typescript class. 

class Circle{
constructor(radius, color) {
this.radius = radius;
this.color= color;
}
getRadius(){
return this.radius;
}
setRadius(radius){
this.radius=radius;
}
getColor()
{
return this.color;
}
setColor(color){
this.color=color;
}
getArea(radius){
return 3.14*this.radius*this.radius;
}
getCircumference(){
return 2*3.14*this.radius;
}
toString() {
return `Circle - Radius: ${this.radius.toString()}, Color: ${this.color}`;
}
}
const circle1= new Circle(1, "red");
const circle2= new Circle(5, "pink");
console.log(circle1.getArea());
circle1.setRadius(7);
console.log(circle1.getRadius());
console.log(circle1.toString());
console.log(circle1);
console.log(circle2.getCircumference());
circle2.setColor("white");
console.log(circle2.getColor());

3.Class Person

class Person{
constructor(name,yob,occupation,gender,workingexp){
this.name=name;
this.yob=yob;
this.occupation=occupation;
this.gender=gender;
this.workingexp=workingexp;
}
getAge(){
return 2023-this.yob;
}
}
const person1=new Person("Silviya",1994,"teacher","female",2);
const person2=new Person("anusha",1995,"designer","female",4);
const person3=new Person("yamini",1994,"telecaller","female",8);
const person4=new Person("dhanush",1994,"scientist","male",7);
console.log(person1);
console.log(person1.getAge());
console.log(person2);
console.log(person3);
console.log(person4);

4:Calculating Uber Price

class UberPriceCalc {
constructor(baseFare, costPerKm, costPerTime, surgeFee = 1.5, tollFee = 5, promotions, bookingFee) {
this.baseFare = baseFare;
this.costPerKm = costPerKm;
this.costPerTime = costPerTime;
this.surgeFee = surgeFee;
this.tollFee = tollFee;
this.promotions = promotions;
this.bookingFee = bookingFee;
}
calculatePrice(distance, duration, SurgeFee, TollFee) {
let plainFare = this.baseFare + (this.costPerKm * distance) + (this.costPerTime * duration);
if (SurgeFee) {
plainFare *= this.surgeFee;
}
if (TollFee) {
plainFare += this.tollFee;
}
if (this.promotions) {
plainFare -= this.promotions;
}
const totalFare = plainFare + this.bookingFee;
return totalFare;
}
}
const person1 = new UberPriceCalc(10, 4, 5, 1.5, 5, 10, 20);
const finalPrice = person1.calculatePrice(1, 60, false, false);
console.log(finalPrice);
